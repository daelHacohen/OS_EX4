        -:    0:Source:UnionFind.cpp
        -:    0:Graph:./UnionFind.gcno
        -:    0:Data:./UnionFind.gcda
        -:    0:Runs:3
        -:    1://dael12345@gmail.com
        -:    2:#include "UnionFind.hpp"
        -:    3:
        -:    4:namespace graph {
        -:    5:
        -:    6: /**
        -:    7: * Constructor: creates a Union-Find (Disjoint Set) structure with n elements.
        -:    8: * Each element starts in its own set.
        -:    9: *
        -:   10: * @param n Number of elements.
        -:   11: */
function _ZN5graph9UnionFindC2Ei called 0 returned 0% blocks executed 0%
    #####:   12:UnionFind::UnionFind(int n) {
    #####:   13:    parent = new int[n];
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:   14:    rank = new int[n];
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
call    3 never executed
    #####:   15:    for (int i = 0; i < n; ++i) {
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   16:        parent[i] = i;
    #####:   17:        rank[i] = 0;
        -:   18:    }
    #####:   19:}
        -:   20:
        -:   21:/**
        -:   22: * Destructor: frees the memory used by the Union-Find structure.
        -:   23: */
function _ZN5graph9UnionFindD2Ev called 0 returned 0% blocks executed 0%
    #####:   24:UnionFind::~UnionFind() {
    #####:   25:    delete[] parent;
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
    #####:   26:    delete[] rank;
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
    #####:   27:}
        -:   28:
        -:   29: /**
        -:   30: * Finds the root (representative) of the set that x belongs to.
        -:   31: * Uses path compression to make future queries faster.
        -:   32: *
        -:   33: * @param x The element to find.
        -:   34: * @return The root of the set that x belongs to.
        -:   35: */
function _ZN5graph9UnionFind4findEi called 0 returned 0% blocks executed 0%
    #####:   36:int UnionFind::find(int x) {
    #####:   37:    if (parent[x] != x)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   38:        parent[x] = find(parent[x]); 
call    0 never executed
    #####:   39:    return parent[x];
        -:   40:}
        -:   41:
        -:   42: /**
        -:   43: * Joins the sets that contain x and y.
        -:   44: * Uses union by rank to keep the structure balanced.
        -:   45: *
        -:   46: * @param x First element.
        -:   47: * @param y Second element.
        -:   48: */
function _ZN5graph9UnionFind5uniteEii called 0 returned 0% blocks executed 0%
    #####:   49:void UnionFind::unite(int x, int y) {
    #####:   50:    int rx = find(x);
call    0 never executed
    #####:   51:    int ry = find(y);
call    0 never executed
    #####:   52:    if (rx == ry) return;
branch  0 never executed (fallthrough)
branch  1 never executed
        -:   53:
    #####:   54:    if (rank[rx] < rank[ry])
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   55:        parent[rx] = ry;
    #####:   56:    else if (rank[rx] > rank[ry])
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   57:        parent[ry] = rx;
        -:   58:    else {
    #####:   59:        parent[ry] = rx;
    #####:   60:        rank[rx]++;
        -:   61:    }
        -:   62:}
        -:   63:
        -:   64:}
