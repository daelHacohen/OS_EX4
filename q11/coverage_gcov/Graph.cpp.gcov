        -:    0:Source:Graph.cpp
        -:    0:Graph:./Graph.gcno
        -:    0:Data:./Graph.gcda
        -:    0:Runs:3
        -:    1:#include "Graph.hpp"
        -:    2:#include <iostream>
        -:    3:#include <random>
        -:    4:#include <set>
        -:    5:#include <utility>
        -:    6:using namespace std;
        -:    7:
        -:    8:namespace graph {
        -:    9:
        -:   10:/**
        -:   11: * Creates a new graph with the given number of vertices.
        -:   12: *
        -:   13: * @param vertices Number of vertices in the graph.
        -:   14: * @throws If the number of vertices is 0 or negative.
        -:   15: */
function _ZN5graph5GraphC2Ei called 3 returned 100% blocks executed 73%
        3:   16:    Graph::Graph(int vertices) {
        3:   17:        if (vertices <= 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   18:            throw "Graph must have at least one vertex.";
call    0 never executed
call    1 never executed
        -:   19:        }
        3:   20:        numVertices = vertices;
       3*:   21:        adjList = new Neighbor*[vertices];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
       33:   22:        for (int i = 0; i < vertices; ++i) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       30:   23:            adjList[i] = nullptr;
        -:   24:        }
        3:   25:    }
        -:   26:
        -:   27: /**
        -:   28: * Frees the memory used by the graph.
        -:   29: * Deletes all the neighbors and the adjacency list.
        -:   30: */
        -:   31:
function _ZN5graph5GraphD2Ev called 6 returned 100% blocks executed 100%
        6:   32:    Graph::~Graph() {
       66:   33:        for (int i = 0; i < numVertices; ++i) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:   34:            Neighbor* current = adjList[i];
      158:   35:            while (current) {
branch  0 taken 62%
branch  1 taken 38% (fallthrough)
       98:   36:                Neighbor* temp = current;
       98:   37:                current = current->next;
       98:   38:                delete temp;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:   39:            }
        -:   40:        }
        6:   41:        delete[] adjList;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        6:   42:    }
        -:   43: /**
        -:   44: * Adds an edge between two vertices with a given weight.
        -:   45: * Since the graph is undirected, the edge is added in both directions.
        -:   46: *
        -:   47: * @param from The first vertex.
        -:   48: * @param to The second vertex.
        -:   49: * @param weight The weight of the edge.
        -:   50: * @throws If one of the vertex indexes is not valid.
        -:   51: */
function _ZN5graph5Graph7addEdgeEiii called 19 returned 100% blocks executed 82%
       19:   52:    void Graph::addEdge(int from, int to, int weight) {
       19:   53:        if (from < 0 || from >= numVertices || to < 0 || to >= numVertices) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
    #####:   54:            throw "Invalid vertex index.";
call    0 never executed
call    1 never executed
        -:   55:        }
        -:   56:
       19:   57:        adjList[from] = new Neighbor(to, weight, adjList[from]);
call    0 returned 100%
call    1 returned 100%
       19:   58:        adjList[to] = new Neighbor(from, weight, adjList[to]);
call    0 returned 100%
call    1 returned 100%
       19:   59:    }
        -:   60:
        -:   61: /**
        -:   62: * Removes one direction of an edge from the adjacency list of a vertex.
        -:   63: *
        -:   64: * @param from The vertex to remove the edge from.
        -:   65: * @param to The neighbor to remove.
        -:   66: * @throws If the edge does not exist.
        -:   67: */
function _ZN5graph5Graph14removeFromListEii called 0 returned 0% blocks executed 0%
    #####:   68:    void Graph::removeFromList(int from, int to) {
    #####:   69:        Neighbor* current = adjList[from];
    #####:   70:        Neighbor* prev = nullptr;
        -:   71:
    #####:   72:        while (current) {
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:   73:            if (current->vertex == to) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   74:                if (prev) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   75:                    prev->next = current->next;
        -:   76:                } else {
    #####:   77:                    adjList[from] = current->next;
        -:   78:                }
    #####:   79:                delete current;
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
    #####:   80:                return;
        -:   81:            }
    #####:   82:            prev = current;
    #####:   83:            current = current->next;
        -:   84:        }
        -:   85:
    #####:   86:        throw "Edge does not exist.";
call    0 never executed
call    1 never executed
        -:   87:    }
        -:   88:
        -:   89: /**
        -:   90: * Removes an edge between two vertices from both directions.
        -:   91: *
        -:   92: * @param from The first vertex.
        -:   93: * @param to The second vertex.
        -:   94: * @throws If one of the vertex indexes is not valid,
        -:   95: *         or if the edge does not exist.
        -:   96: */
function _ZN5graph5Graph10removeEdgeEii called 0 returned 0% blocks executed 0%
    #####:   97:    void Graph::removeEdge(int from, int to) {
    #####:   98:        if (from < 0 || from >= numVertices || to < 0 || to >= numVertices) {
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    #####:   99:            throw "Invalid vertex index.";
call    0 never executed
call    1 never executed
        -:  100:        }
        -:  101:
    #####:  102:        removeFromList(from, to);
call    0 never executed
    #####:  103:        removeFromList(to, from);
call    0 never executed
    #####:  104:    }
        -:  105:
        -:  106: /**
        -:  107: * Prints the graph as an adjacency list.
        -:  108: * Each line shows a vertex and its connected neighbors with weights.
        -:  109: */
function _ZNK5graph5Graph11print_graphEv called 1 returned 100% blocks executed 100%
        1:  110:    void Graph::print_graph() const {
       11:  111:        for (int i = 0; i < numVertices; ++i) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  112:            std::cout << "Vertex " << i << ":";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       10:  113:            Neighbor* current = adjList[i];
       30:  114:            while (current) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       20:  115:                std::cout << " -> (" << current->vertex << ", w=" << current->weight << ")";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
       20:  116:                current = current->next;
        -:  117:            }
       10:  118:            std::cout << std::endl;
call    0 returned 100%
        -:  119:        }
        1:  120:    }
        -:  121: 
        -:  122:
function _ZNK5graph5Graph6isEvenEv called 1 returned 100% blocks executed 90%
        1:  123:      bool Graph::isEven() const {
        2:  124:        for (int i = 0; i < numVertices; ++i) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        2:  125:            int numOfNeighbors =0;
        2:  126:            Neighbor* current = adjList[i];
        7:  127:            while (current) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        5:  128:                numOfNeighbors++;
        5:  129:                current = current->next;
        -:  130:            }
        2:  131:            if (numOfNeighbors%2==1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  132:            {
        1:  133:                return false;
        -:  134:            }
        -:  135:        }
    #####:  136:        return true;
        -:  137:    }
        -:  138:
        -:  139:
function _ZNK5graph5Graph17getNumOfNeighborsEi called 0 returned 0% blocks executed 0%
    #####:  140:       int Graph::getNumOfNeighbors(int i) const {
    #####:  141:            int numOfNeighbors =0;
    #####:  142:            Neighbor* current = adjList[i];
    #####:  143:            while (current) {
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  144:                numOfNeighbors++;
    #####:  145:                current = current->next;
        -:  146:            }
    #####:  147:        return numOfNeighbors;
        -:  148:    }
        -:  149:
        -:  150:
        -:  151: /**
        -:  152: * Returns the number of vertices in the graph.
        -:  153: *
        -:  154: * @return Number of vertices.
        -:  155: */
function _ZNK5graph5Graph14getNumVerticesEv called 2 returned 100% blocks executed 100%
        2:  156:    int Graph::getNumVertices() const {
        2:  157:    return numVertices;
        -:  158:    }
        -:  159:
        -:  160: /**
        -:  161: * Returns the adjacency list of the graph.
        -:  162: *
        -:  163: * @return Pointer to the adjacency list.
        -:  164: */
function _ZNK5graph5Graph10getAdjListEv called 23 returned 100% blocks executed 100%
       23:  165:    Neighbor** Graph::getAdjList() const {
       23:  166:    return adjList;
        -:  167:    }
        -:  168:
function _ZN5graph5Graph9cloneListEPNS_8NeighborE called 30 returned 100% blocks executed 100%
       30:  169:    Neighbor* Graph::cloneList(Neighbor* head) {
       30:  170:    Neighbor* newHead = nullptr;
       30:  171:    Neighbor* tail = nullptr;
       90:  172:    for (Neighbor* p = head; p; p = p->next) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       60:  173:        Neighbor* node = new Neighbor(p->vertex, p->weight, nullptr);
call    0 returned 100%
call    1 returned 100%
       60:  174:        if (!newHead) newHead = node;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       30:  175:        else          tail->next = node;
       60:  176:        tail = node;
        -:  177:    }
       30:  178:    return newHead;
        -:  179:}
        -:  180:
        -:  181:
function _ZN5graph5GraphC2ERKS0_ called 3 returned 100% blocks executed 89%
        3:  182:Graph::Graph(const Graph& other) : numVertices(other.numVertices) {
       3*:  183:    adjList = new Neighbor*[numVertices];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
       33:  184:    for (int i = 0; i < numVertices; ++i) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       30:  185:        adjList[i] = Graph::cloneList(other.adjList[i]); 
call    0 returned 100%
        -:  186:    }
        3:  187:}
        -:  188:
        -:  189:
function _ZN5graph5GraphaSERKS0_ called 1 returned 100% blocks executed 89%
        1:  190:Graph& Graph::operator=(const Graph& other) {
       1*:  191:    if (this == &other) return *this;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:  192:    Graph tmp(other);                
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  193:    std::swap(numVertices, tmp.numVertices);
call    0 returned 100%
        1:  194:    std::swap(adjList,     tmp.adjList);
call    0 returned 100%
        1:  195:    return *this;                    
        1:  196:}
call    0 returned 100%
        -:  197:
function _ZN5graph5Graph8isInsideESt3setISt4pairIiiESt4lessIS3_ESaIS3_EEii called 12 returned 100% blocks executed 100%
       12:  198:bool Graph::isInside(set<pair<int,int>>used_pairs,int a, int b ){
       70:  199:     for (pair<int,int> temp : used_pairs) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 84%
branch  6 taken 16% (fallthrough)
        -:  200:    
       59:  201:           if (temp.first==b && temp.second == a)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
        -:  202:           {
        1:  203:            return true;
        -:  204:           }
        -:  205:           
        -:  206:            
        -:  207:        }
       11:  208:        return false;
        -:  209:}
        -:  210:
function _ZN5graph5Graph19generateRandomGraphEii called 1 returned 100% blocks executed 79%
        1:  211:    Graph Graph::generateRandomGraph (int v , int e){
        1:  212:    random_device rd;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  213:    mt19937 gen(rd());
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1:  214:    uniform_int_distribution<> dist(0, v-1); // טווח המספרים
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  215:
        1:  216:    set<pair<int,int>> used_pairs; // סט לשמירת זוגות שכבר הופיעו
call    0 returned 100%
        -:  217:
       12:  218:    while(static_cast<int>(used_pairs.size())<e)
call    0 returned 100%
branch  1 taken 92%
branch  2 taken 8% (fallthrough)
        -:  219:    {
       11:  220:        int a = dist(gen);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       11:  221:        int b = dist(gen);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  222:
        -:  223:        
        -:  224:
       14:  225:        while (a==b || isInside(used_pairs,a,b)){
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 8% (fallthrough)
branch  7 taken 92%
branch  8 taken 86% (fallthrough)
branch  9 taken 14%
call   10 returned 100%
branch 11 taken 21%
branch 12 taken 79% (fallthrough)
branch 13 never executed (fallthrough)
branch 14 never executed
call   15 never executed
        3:  226:            b = dist(gen); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  227:        }
        -:  228:        
       11:  229:        pair<int,int> p = {a,b};
call    0 returned 100%
        -:  230:        
       11:  231:        used_pairs.insert(p);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  232:    }
        1:  233:    Graph g(v);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  234:    int w=0;
       11:  235:    for (int i = 0; i < e; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  236:    {
       10:  237:        w=dist(gen); 
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       10:  238:        auto it=used_pairs.begin();
call    0 returned 100%
        -:  239:        advance(it,i);
       10:  240:        g.addEdge(it->first,it->second,w);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
        -:  241:        
        -:  242:    }
        2:  243:    return g;
        -:  244:    
        -:  245:
        1:  246:}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
call    4 never executed
        -:  247:}
