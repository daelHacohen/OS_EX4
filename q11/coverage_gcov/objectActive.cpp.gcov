        -:    0:Source:objectActive.cpp
        -:    0:Graph:./objectActive.gcno
        -:    0:Data:./objectActive.gcda
        -:    0:Runs:3
        -:    1:#include"Algorithms.hpp"
        -:    2:#include"Graph.hpp"
        -:    3:#include"factory.hpp"
        -:    4:#include"UnionFind.hpp"
        -:    5:#include"stradegy.hpp"
        -:    6:#include"TSQueue.hpp"
        -:    7:#include<thread>
        -:    8:#include <atomic>
        -:    9:#include <sys/types.h>
        -:   10:#include <sys/socket.h>
        -:   11:#include <unistd.h>
        -:   12:#include"objectActive.hpp"
        -:   13:using namespace std;
        -:   14:
        -:   15:
        -:   16:class MaxFlowStage; class MaxCliqueStage; class MstStage; class EulerStage; // קדימה-הכרזה
        -:   17:factory f;
        -:   18:
function _Z9calculateNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERN5graph5GraphEii called 4 returned 100% blocks executed 31%
        4:   19:string calculate(string name, Graph& g,int start,int end){
        -:   20:    
        -:   21:  try {
        4:   22:    factory f;
call    0 returned 100%
        4:   23:    std::unique_ptr<stradegy> action=f.create(name);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   24:    // stradegy* action=f.create(name);
        4:   25:    string ans = action->run(g,start,end);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:   26:    // delete action;
        4:   27:    return ans;
call    0 returned 100%
        4:   28:      } catch (const std::exception& ex) {
call    0 returned 100%
call    1 returned 100%
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
call    5 never executed
        -:   29:        // תחזיר הודעת שגיאה ללקוח במקום להפיל את השרת
    =====:   30:        return std::string("error: ") + ex.what();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
call    8 never executed
    =====:   31:    }
call    0 never executed
call    1 never executed
        -:   32:}
        -:   33:
        -:   34:
        -:   35:
        -:   36:// ---- Stage 1: Euler ----
        -:   37:
        -:   38:
function _ZN10EulerStage3runEv called 1 returned 100% blocks executed 60%
        1:   39:    void EulerStage::run(){
        1:   40:        ReqPtr r;
        3:   41:        while(q.pop(r)){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50%
branch  4 taken 50% (fallthrough)
        -:   42:            
        -:   43:            // bool ok = Algorithms::Euler_circle(*r->g, r->R);
        2:   44:            r->answer += "Euler circle: " + calculate("Euler circle",*r->g,r->R,r->V) + "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
        1:   45:            if (next) next->post(std::move(r));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        -:   46:        } 
        1:   47:    }
call    0 returned 100%
call    1 never executed
        -:   48:
function _ZN10EulerStage8set_nextEP12MaxFlowStage called 1 returned 100% blocks executed 100%
        1:   49:    void EulerStage::set_next(MaxFlowStage* n){ next=n; }
       2*:   50:    void EulerStage::start(){ if(started.exchange(true)) return; th=std::thread([this]{run();}); }
------------------
_ZN10EulerStage5startEv:
function _ZN10EulerStage5startEv called 1 returned 100% blocks executed 80%
       1*:   50:    void EulerStage::start(){ if(started.exchange(true)) return; th=std::thread([this]{run();}); }
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
------------------
_ZZN10EulerStage5startEvENKUlvE_clEv:
function _ZZN10EulerStage5startEvENKUlvE_clEv called 1 returned 100% blocks executed 100%
        1:   50:    void EulerStage::start(){ if(started.exchange(true)) return; th=std::thread([this]{run();}); }
call    0 returned 100%
------------------
function _ZN10EulerStage4postESt10shared_ptrI7RequestE called 1 returned 100% blocks executed 75%
        1:   51:    void EulerStage::post(ReqPtr r){ q.push(std::move(r)); }
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
function _ZN10EulerStage4stopEv called 1 returned 100% blocks executed 100%
        1:   52:    void EulerStage::stop(){ q.close(); if(th.joinable()) th.join(); }
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
        -:   53:
        -:   54:
        -:   55:// ---- Stage 2: Max Flow ----
        -:   56:
        -:   57:    
function _ZN12MaxFlowStage3runEv called 1 returned 100% blocks executed 60%
        1:   58:   void MaxFlowStage::run(){
        1:   59:        ReqPtr r;
        3:   60:        while(q.pop(r)){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50%
branch  4 taken 50% (fallthrough)
        2:   61:            r->answer += "Max Flow: " + calculate("max flow",*r->g,r->R,r->V) + "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
        1:   62:            if (next) next->post(std::move(r));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        -:   63:        } 
        1:   64:    }
call    0 returned 100%
call    1 never executed
        -:   65:
function _ZN12MaxFlowStage8set_nextEP14MaxCliqueStage called 1 returned 100% blocks executed 100%
        1:   66:    void MaxFlowStage::set_next(MaxCliqueStage* n){ next=n; }
       2*:   67:    void MaxFlowStage::start(){ if(started.exchange(true)) return; th=std::thread([this]{run();}); }
------------------
_ZN12MaxFlowStage5startEv:
function _ZN12MaxFlowStage5startEv called 1 returned 100% blocks executed 80%
       1*:   67:    void MaxFlowStage::start(){ if(started.exchange(true)) return; th=std::thread([this]{run();}); }
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
------------------
_ZZN12MaxFlowStage5startEvENKUlvE_clEv:
function _ZZN12MaxFlowStage5startEvENKUlvE_clEv called 1 returned 100% blocks executed 100%
        1:   67:    void MaxFlowStage::start(){ if(started.exchange(true)) return; th=std::thread([this]{run();}); }
call    0 returned 100%
------------------
function _ZN12MaxFlowStage4postESt10shared_ptrI7RequestE called 1 returned 100% blocks executed 75%
        1:   68:    void MaxFlowStage::post(ReqPtr r){ q.push(std::move(r)); }
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
function _ZN12MaxFlowStage4stopEv called 1 returned 100% blocks executed 100%
        1:   69:    void MaxFlowStage::stop(){ q.close(); if(th.joinable()) th.join(); }
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
        -:   70:
        -:   71:// ---- Stage 3: Max Clique ----
        -:   72:
        -:   73:   
function _ZN14MaxCliqueStage3runEv called 1 returned 100% blocks executed 60%
        1:   74:  void MaxCliqueStage::run(){
        1:   75:        ReqPtr r;
        3:   76:        while(q.pop(r)){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50%
branch  4 taken 50% (fallthrough)
        2:   77:            r->answer += "Max Clique: " + calculate("Max Clique",*r->g,r->R,r->V) + "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
        1:   78:            if (next) next->post(std::move(r));
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 never executed
        -:   79:        } 
        1:   80:    }
call    0 returned 100%
call    1 never executed
        -:   81:
function _ZN14MaxCliqueStage8set_nextEP8MstStage called 1 returned 100% blocks executed 100%
        1:   82:    void MaxCliqueStage::set_next(MstStage* n){ next=n; }
       2*:   83:    void MaxCliqueStage::start(){ if(started.exchange(true)) return; th=std::thread([this]{run();}); }
------------------
_ZN14MaxCliqueStage5startEv:
function _ZN14MaxCliqueStage5startEv called 1 returned 100% blocks executed 80%
       1*:   83:    void MaxCliqueStage::start(){ if(started.exchange(true)) return; th=std::thread([this]{run();}); }
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
------------------
_ZZN14MaxCliqueStage5startEvENKUlvE_clEv:
function _ZZN14MaxCliqueStage5startEvENKUlvE_clEv called 1 returned 100% blocks executed 100%
        1:   83:    void MaxCliqueStage::start(){ if(started.exchange(true)) return; th=std::thread([this]{run();}); }
call    0 returned 100%
------------------
function _ZN14MaxCliqueStage4postESt10shared_ptrI7RequestE called 1 returned 100% blocks executed 75%
        1:   84:    void MaxCliqueStage::post(ReqPtr r){ q.push(std::move(r)); }
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
function _ZN14MaxCliqueStage4stopEv called 1 returned 100% blocks executed 100%
        1:   85:    void MaxCliqueStage::stop(){ q.close(); if(th.joinable()) th.join(); }
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
        -:   86:
        -:   87:
        -:   88:// ---- Stage 4: MST (שלב אחרון — שולח ללקוח) ----
        -:   89:
        -:   90:   
function _ZN8MstStage3runEv called 1 returned 100% blocks executed 65%
        1:   91:    void MstStage::run(){
        1:   92:        ReqPtr r;
        2:   93:        while(q.pop(r)){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50%
branch  4 taken 50% (fallthrough)
        2:   94:            r->answer += "MST: " + calculate("MST",*r->g,r->R,r->V) + "\n";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
branch  8 taken 100% (fallthrough)
branch  9 taken 0% (throw)
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
call   13 returned 100%
branch 14 taken 100% (fallthrough)
branch 15 taken 0% (throw)
call   16 returned 100%
call   17 returned 100%
branch 18 taken 100% (fallthrough)
branch 19 taken 0% (throw)
call   20 returned 100%
call   21 returned 100%
call   22 returned 100%
call   23 returned 100%
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
        -:   95:            // שליחה ללקוח וסגירה:
       1*:   96:            if (!r->answer.empty() && r->answer.back()!='\n') r->answer.push_back('\n');
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
        -:   97:            // send_all_and_close(r->client_fd, r->answer);
        1:   98:              if (send(r->client_fd, r->answer.c_str(), r->answer.size(), 0) == -1) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
    #####:   99:                cerr << "Sending failed!" << endl;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####:  100:                return;
        -:  101:            }
        1:  102:            ::close(r->client_fd);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:  103:           
        -:  104:            
        -:  105:        }
        1:  106:    }
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 never executed
        -:  107:
       2*:  108:    void MstStage::start(){ if(started.exchange(true)) return; th=std::thread([this]{run();}); }
------------------
_ZN8MstStage5startEv:
function _ZN8MstStage5startEv called 1 returned 100% blocks executed 80%
       1*:  108:    void MstStage::start(){ if(started.exchange(true)) return; th=std::thread([this]{run();}); }
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 returned 100%
------------------
_ZZN8MstStage5startEvENKUlvE_clEv:
function _ZZN8MstStage5startEvENKUlvE_clEv called 1 returned 100% blocks executed 100%
        1:  108:    void MstStage::start(){ if(started.exchange(true)) return; th=std::thread([this]{run();}); }
call    0 returned 100%
------------------
function _ZN8MstStage4postESt10shared_ptrI7RequestE called 1 returned 100% blocks executed 75%
        1:  109:    void MstStage::post(ReqPtr r){ q.push(std::move(r)); }
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 never executed
function _ZN8MstStage4stopEv called 1 returned 100% blocks executed 100%
        1:  110:    void MstStage::stop(){ q.close(); if(th.joinable()) th.join(); }
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 returned 100%
        -:  111:
