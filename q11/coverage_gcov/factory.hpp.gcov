        -:    0:Source:factory.hpp
        -:    0:Graph:./objectActive.gcno
        -:    0:Data:./objectActive.gcda
        -:    0:Runs:3
        -:    1:#pragma once
        -:    2:
        -:    3:#include "stradegy.hpp"
        -:    4:#include<string>
        -:    5:#include <memory>
        -:    6:#include <algorithm>  // std::transform, std::replace
        -:    7:#include <cctype>
        -:    8:
        -:    9:
        -:   10:class factory{
        -:   11:    public:
function _ZN7factoryC2Ev called 7 returned 100% blocks executed 100%
        7:   12:    factory(){}
        -:   13:
        -:   14:    //  std::unique_ptr<stradegy> create(string name){
        -:   15:    //     if(name=="Euler circle"){return std::make_unique<Euler_circle>();}
        -:   16:    //     if(name=="max flow"){return std::make_unique<fordFulkerson>();}
        -:   17:    //     if(name=="count cliques"){return std::make_unique<countCliques>();}
        -:   18:    //     if(name=="find Max clique"){return std::make_unique<findMaxClique>();}
        -:   19:    //     if(name=="MST"){return std::make_unique<kruskalMST>();}
        -:   20:
        -:   21:    //     throw std::invalid_argument("Unknown strategy: " + name);
        -:   22:    // }
function _ZN7factory6createERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 73%
        4:   23: std::unique_ptr<stradegy> create(const std::string& name) {
        4:   24:        std::string norm = name;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:   25:        std::transform(norm.begin(), norm.end(), norm.begin(), ::tolower);
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   26:
        4:   27:        if (norm == "euler circle" || norm == "euler")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 75% (fallthrough)
branch  4 taken 25%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 25% (fallthrough)
branch 11 taken 75%
        1:   28:            return std::make_unique<Euler_circle>();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:   29:
        3:   30:        if (norm == "max flow" || norm == "ford fulkerson")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 67% (fallthrough)
branch  4 taken 33%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 taken 33% (fallthrough)
branch 11 taken 67%
        1:   31:            return std::make_unique<fordFulkerson>();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:   32:
        2:   33:        if (norm == "max clique" || norm == "find max clique" || norm == "count cliques")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 50% (fallthrough)
branch  4 taken 50%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
call   10 returned 100%
branch 11 taken 100% (fallthrough)
branch 12 taken 0% (throw)
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 taken 50% (fallthrough)
branch 16 taken 50%
        1:   34:            return std::make_unique<findMaxClique>();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:   35:
       1*:   36:        if (norm == "mst" || norm == "kruskal")
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
branch  8 never executed (fallthrough)
branch  9 never executed
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
        1:   37:            return std::make_unique<kruskalMST>();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -:   38:
        -:   39:        // חשוב: אל תישאר בלי return → זרוק חריגה
    #####:   40:        throw std::invalid_argument("Unknown strategy: " + name);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
        4:   41:    }
call    0 returned 100%
call    1 never executed
        -:   42:
        -:   43:
        -:   44:
        -:   45:};
